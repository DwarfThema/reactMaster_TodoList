{"version":3,"sources":["atom.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["enumCategories","toDoState","atom","key","default","JSON","parse","localStorage","getItem","categoryState","TO_DO","toDoSelector","selector","get","getToDoState","getCategory","filter","category","CreateToDo","useRecoilState","nowTodos","setTodos","valueCategory","useRecoilValue","useForm","register","handleSubmit","setValue","submitFn","toDo","oldTodo","text","id","Date","now","console","log","useEffect","setItem","stringify","onSubmit","type","placeholder","ToDo","setToDo","useSetRecoilState","nowToDo","changeCategory","event","name","currentTarget","oldToDo","findIndex","newToDo","slice","DOING","onClick","DONE","oldToDos","todo","ToDoList","toDos","nowCategory","setCategory","value","onInput","map","GlobalStyle","createGlobalStyle","p","theme","bgColor","textColor","App","ReactDOM","render","pointColor","document","getElementById"],"mappings":"gIAEYA,E,uEAAAA,K,cAAAA,E,cAAAA,E,aAAAA,M,KAYL,IAAMC,EAAYC,YAAe,CACtCC,IAAK,OACLC,QAASC,KAAKC,MAAMC,aAAaC,QAAQ,SAAW,QAGzCC,EAAgBP,YAAqB,CAChDC,IAAK,WACLC,QAASJ,EAAeU,QAGbC,EAAeC,YAAS,CACnCT,IAAK,eACLU,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAC,EAAeD,EAAIZ,GACnBc,EAAcF,EAAIJ,GACxB,OAAOK,EAAaE,QAClB,SAACF,GAAD,OAAkBA,EAAaG,WAAaF,Q,sBCUnCG,MA/Bf,WAAuB,IAAD,EACSC,YAAelB,GADxB,mBACbmB,EADa,KACHC,EADG,KAEdC,EAAgBC,YAAed,GAFjB,EAIyBe,cAArCC,EAJY,EAIZA,SAAUC,EAJE,EAIFA,aAAcC,EAJZ,EAIYA,SAE1BC,EAAW,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAClBR,GAAS,SAACS,GAAD,OACP,CAAEC,KAAMF,EAAMG,GAAIC,KAAKC,MAAOjB,SAAUK,IADjC,mBAEJQ,OAELK,QAAQC,IAAIhB,GAEZO,EAAS,OAAQ,KAUnB,OAPAU,qBAAU,WAEN9B,aAAa+B,QAAQ,OAAQjC,KAAKkC,UAAUnB,MAG7C,CAACQ,IAGF,uBAAMY,SAAUd,EAAaE,GAA7B,UACE,iDAAWH,EAAS,SAApB,IAA6BgB,KAAK,OAAOC,YAAY,cACrD,6CCqBSC,MApDf,YAA+C,IAA/BZ,EAA8B,EAA9BA,KAAMd,EAAwB,EAAxBA,SAAUe,EAAc,EAAdA,GACxBY,EAAUC,YAAkB5C,GAC5B6C,EAAUvB,YAAetB,GACzB8C,EAAiB,SAACC,GAAgD,IAEnDC,EACfD,EADFE,cAAiBD,KAEnBL,GAAQ,SAACO,GACP,IAAMC,EAAYD,EAAQC,WAAU,SAACvB,GAAD,OAAUA,EAAKG,KAAOA,KACpDqB,EAAU,CAAEtB,OAAMC,KAAIf,SAAUgC,GACtC,MAAM,GAAN,mBACKE,EAAQG,MAAM,EAAGF,IADtB,CAEEC,GAFF,YAGKF,EAAQG,MAAMF,EAAY,SAgBnC,OACE,+BACE,+BAAOrB,IACNd,IAAajB,EAAeuD,OAC3B,wBAAQN,KAAMjD,EAAeuD,MAAOC,QAAST,EAA7C,mBAID9B,IAAajB,EAAeU,OAC3B,wBAAQuC,KAAMjD,EAAeU,MAAO8C,QAAST,EAA7C,mBAID9B,IAAajB,EAAeyD,MAC3B,wBAAQR,KAAMjD,EAAeyD,KAAMD,QAAST,EAA5C,kBAIF,wBAAQS,QA7BI,WACdZ,GAAQ,SAACc,GACP,IAAMN,EAAYM,EAASN,WAAU,SAACO,GAAD,OAAUA,EAAK3B,KAAOA,KAC3D,MAAM,GAAN,mBACK0B,EAASJ,MAAM,EAAGF,IADvB,YAEKM,EAASJ,MAAMF,EAAY,QAGlC7C,aAAa+B,QAAQ,OAAQjC,KAAKkC,UAAUO,KAqB1C,wBCjBSc,I,EAAAA,EA5Bf,WACE,IAAMC,EAAQtC,YAAeZ,GADX,EAEiBQ,YAAeV,GAFhC,mBAEXqD,EAFW,KAEEC,EAFF,KAQlB,OACE,gCACE,4CACA,uBACA,yBAAQC,MAAOF,EAAaG,QARhB,SAACjB,GACfe,EAAYf,EAAME,cAAcc,QAO9B,UACE,wBAAQA,MAAOhE,EAAeU,MAA9B,mBACA,wBAAQsD,MAAOhE,EAAeuD,MAA9B,mBACA,wBAAQS,MAAOhE,EAAeyD,KAA9B,qBAEF,uBACA,cAAC,EAAD,IACA,oCACGI,QADH,IACGA,OADH,EACGA,EAAOK,KAAI,SAACP,GAAD,OACV,cAAC,EAAD,eAAwBA,GAAbA,EAAK3B,aCxBpBmC,EAAcC,YAAH,29CAwDK,SAACC,GAAD,OAAOA,EAAEC,MAAMC,WAC1B,SAACF,GAAD,OAAOA,EAAEC,MAAME,aAkBXC,MATf,WACE,OACE,qCACE,cAACN,EAAD,IACA,cAAC,EAAD,Q,QClENO,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAeL,MCRc,CACjCC,QAAS,UACTC,UAAW,UACXI,WAAY,WDKR,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.ee0de68e.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nexport enum enumCategories {\r\n  \"TO_DO\" = \"TO_DO\",\r\n  \"DOING\" = \"DOING\",\r\n  \"DONE\" = \"DONE\",\r\n}\r\n\r\nexport interface ITodos {\r\n  text: string;\r\n  id: number;\r\n  category: enumCategories;\r\n}\r\n\r\nexport const toDoState = atom<ITodos[]>({\r\n  key: \"todo\",\r\n  default: JSON.parse(localStorage.getItem(\"Todo\") || \"[]\"),\r\n});\r\n\r\nexport const categoryState = atom<enumCategories>({\r\n  key: \"category\",\r\n  default: enumCategories.TO_DO,\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: \"todoSelector\",\r\n  get: ({ get }) => {\r\n    const getToDoState = get(toDoState);\r\n    const getCategory = get(categoryState);\r\n    return getToDoState.filter(\r\n      (getToDoState) => getToDoState.category === getCategory\r\n    );\r\n  },\r\n});\r\n","import { useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { categoryState, toDoState } from \"../atom\";\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n  const [nowTodos, setTodos] = useRecoilState(toDoState);\r\n  const valueCategory = useRecoilValue(categoryState);\r\n\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n\r\n  const submitFn = ({ toDo }: IForm) => {\r\n    setTodos((oldTodo) => [\r\n      { text: toDo, id: Date.now(), category: valueCategory },\r\n      ...oldTodo,\r\n    ]);\r\n    console.log(nowTodos);\r\n\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    const save = () => {\r\n      localStorage.setItem(\"Todo\", JSON.stringify(nowTodos));\r\n    };\r\n    save();\r\n  }, [submitFn]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(submitFn)}>\r\n      <input {...register(\"toDo\")} type=\"text\" placeholder=\"Add Todo\" />\r\n      <button>add</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import React from \"react\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { enumCategories, ITodos, toDoState } from \"../atom\";\r\n\r\nfunction ToDo({ text, category, id }: ITodos) {\r\n  const setToDo = useSetRecoilState(toDoState);\r\n  const nowToDo = useRecoilValue(toDoState);\r\n  const changeCategory = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n    setToDo((oldToDo) => {\r\n      const findIndex = oldToDo.findIndex((toDo) => toDo.id === id);\r\n      const newToDo = { text, id, category: name as ITodos[\"category\"] };\r\n      return [\r\n        ...oldToDo.slice(0, findIndex),\r\n        newToDo,\r\n        ...oldToDo.slice(findIndex + 1),\r\n      ];\r\n    });\r\n  };\r\n\r\n  const delTodo = () => {\r\n    setToDo((oldToDos) => {\r\n      const findIndex = oldToDos.findIndex((todo) => todo.id === id);\r\n      return [\r\n        ...oldToDos.slice(0, findIndex),\r\n        ...oldToDos.slice(findIndex + 1),\r\n      ];\r\n    });\r\n    localStorage.setItem(\"Todo\", JSON.stringify(nowToDo));\r\n  };\r\n\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {category !== enumCategories.DOING && (\r\n        <button name={enumCategories.DOING} onClick={changeCategory}>\r\n          Doing\r\n        </button>\r\n      )}\r\n      {category !== enumCategories.TO_DO && (\r\n        <button name={enumCategories.TO_DO} onClick={changeCategory}>\r\n          To Do\r\n        </button>\r\n      )}\r\n      {category !== enumCategories.DONE && (\r\n        <button name={enumCategories.DONE} onClick={changeCategory}>\r\n          Done\r\n        </button>\r\n      )}\r\n      <button onClick={delTodo}>‚ùå</button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { categoryState, enumCategories, toDoSelector } from \"../atom\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nfunction ToDoList() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  const [nowCategory, setCategory] = useRecoilState(categoryState);\r\n\r\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    setCategory(event.currentTarget.value as any);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>To-Do List</h1>\r\n      <br />\r\n      <select value={nowCategory} onInput={onInput}>\r\n        <option value={enumCategories.TO_DO}>To Do</option>\r\n        <option value={enumCategories.DOING}>Doing</option>\r\n        <option value={enumCategories.DONE}>Done</option>\r\n      </select>\r\n      <br />\r\n      <CreateToDo />\r\n      <ul>\r\n        {toDos?.map((todo) => (\r\n          <ToDo key={todo.id} {...todo} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport ToDoList from \"./components/ToDoList\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@300&display=swap');\r\n  /* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n*{\r\n  box-sizing: border-box;\r\n}\r\nbody{  \r\n  font-weight: 300;\r\n  font-family: 'Roboto Mono', monospace;\r\n  background-color: ${(p) => p.theme.bgColor};\r\n  color: ${(p) => p.theme.textColor};\r\n  line-height: 1.2;\r\n}\r\na{\r\n  text-decoration: none;\r\n  color:inherit;\r\n}\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <ToDoList />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { theme } from \"./theme\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <RecoilRoot>\r\n      <ThemeProvider theme={theme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </RecoilRoot>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const theme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"#f5f6fa\",\r\n  pointColor: \"#9c88ff\",\r\n};\r\n"],"sourceRoot":""}